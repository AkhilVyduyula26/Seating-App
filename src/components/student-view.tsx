"use client";

import { useState, useTransition } from "react";
import { useForm, type SubmitHandler } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import StudentSeatCard from "./student-seat-card";
import { Ticket, Search, Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { getStudentSeatAction } from "@/lib/actions";
import type { StudentSeatDetails } from "@/lib/types";

const LoginSchema = z.object({
  hallTicketNumber: z.string().min(1, "Hall ticket number is required."),
});

type LoginSchemaType = z.infer<typeof LoginSchema>;

export default function StudentView() {
  const [studentSeat, setStudentSeat] = useState<StudentSeatDetails | null>(null);
  const { toast } = useToast();
  const [isPending, startTransition] = useTransition();


  const form = useForm<LoginSchemaType>({
    resolver: zodResolver(LoginSchema),
    defaultValues: {
      hallTicketNumber: "",
    },
  });

  const onSubmit: SubmitHandler<LoginSchemaType> = (data) => {
    startTransition(async () => {
        setStudentSeat(null);
        const foundSeat = await getStudentSeatAction(data.hallTicketNumber);
        
        if (foundSeat) {
            setStudentSeat(foundSeat);
            toast({
                title: "Login Successful",
                description: `Welcome, ${foundSeat.name}. Your seat details are displayed below.`,
            });
        } else {
            setStudentSeat(null);
            toast({
                variant: "destructive",
                title: "Login Failed",
                description: "Hall ticket number not found, or a seating plan has not been generated by the admin yet.",
            });
        }
    });
  };

  return (
    <Card className="w-full max-w-2xl mx-auto shadow-lg">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
            <Ticket />
            Find Your Seat
        </CardTitle>
        <CardDescription>
          Enter your hall ticket number to view your assigned seat for the examination.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="flex items-end gap-4 mb-8">
            <FormField
              control={form.control}
              name="hallTicketNumber"
              render={({ field }) => (
                <FormItem className="flex-grow">
                  <FormLabel>Hall Ticket Number</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., 20XJ1A0501" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit" variant="default" className="bg-primary hover:bg-primary/90" disabled={isPending}>
              {isPending ? <Loader2 className="mr-2 h-4 w-4 animate-spin"/> : <Search className="mr-2 h-4 w-4" />}
              Search
            </Button>
          </form>
        </Form>
        
        {studentSeat && (
          <div className="animate-in fade-in duration-500">
             <StudentSeatCard seatDetails={studentSeat} />
          </div>
        )}
      </CardContent>
    </Card>
  );
}
